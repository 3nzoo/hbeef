<Route path="*" element={<Navigate to="/" /> } />
//! to make other path inaccessible

<Route path=






<div
          className={`mx-auto m-1 mt-4  flex flex-col max-w-2xl text-xl text-gray-900 font-semibold xl:max-w-full sm:max-w-[66%] xs:max-w-[55%] md:max-w-[76%] `}
        >
          <div className='ml-2 mt-3 text-2xl'>
            <h1>Hi Name!</h1>
          </div>
          <div className='flex justify-end items-center flex-row w-full mt-5 p-1'>
            <div className='xs:text-sm font-light sm:text-base flex overflow-auto'>
              <button
                className='bg-yellow-500 p-1 px-2 rounded-lg text-white hover:text-gray-800'
                onClick={() => dispatch(toggleUpload())}
              >
                Upload Menu
              </button>
              <button
                className='bg-green-700 text-white p-1 px-2 rounded-lg mx-2 hover:text-gray-700'
                onClick={() => dispatch(toggleCategory())}
              >
                Category+
              </button>
              <button
                className='bg-green-700 text-white p-1 px-2 rounded-lg hover:text-gray-800'
                onClick={() => dispatch(toggleProd())}
              >
                Product+
              </button>
            </div>
          </div>

          <div className='mt-4 pb-2 overflow-auto'>
            <ul className='mt-3 flex flex-col gap-3 md:w-[40rem] xl:w-[50rem]'>
              <li className='flex flex-row grow w-auto justify-between items-center overflow-auto h-10 gap-4 text-center sm:text-sm md:text-xl'>
                <div className='min-w-[20%]'>Image</div>
                <div className='min-w-[20%]'>Name here</div>
                <div className='min-w-[10%]'>Price</div>
                <div className='min-w-[20%]'>Category</div>
                <div className='flex flex-row gap-4 min-w-[20%]'>Actions</div>
              </li>
              <li className='flex flex-row grow w-auto justify-between items-center overflow-auto md:h-32 sm:h-20 gap-4 text-center md:text-base sm:text-sm'>
                {/*//! Image / Name / Price / category */}
                <img
                  src={imageURL}
                  alt='itemname'
                  width='60'
                  height='60'
                  className='min-w-[20%] p-2 border-1 drop-shadow-md border-gray-800'
                />
                <div className='min-w-[20%]'>Name here</div>{' '}
                <div className='min-w-[10%]'>Price</div>{' '}
                <div className='min-w-[20%]'>Category</div>
                <div className='flex flex-row gap-4 min-w-[20%]'>
                  <button className='bg-yellow-500 p-1 px-2 rounded-lg text-white hover:text-gray-700'>
                    Edit
                  </button>
                  <button className='bg-red-600 p-1 px-2 rounded-lg text-white hover:text-gray-700'>
                    Delete
                  </button>
                </div>
              </li>
            </ul>
            {/* <ul className='mt-3 flex flex-row gap-4 overflow-y-auto py-2 text-sm px-2'>
              {sampleProd.map((item: string, index: number) => (
                <li
                  className='px-4 py-2 bg-gray-800 rounded-full text-white'
                  key={index}
                >
                  {item}
                </li>
              ))}
            </ul> */}
          </div>
        </div>


prod name
price
category
actions



[
    {
        "AllowedHeaders": [
            "*"
        ],
        "AllowedMethods": [
            "PUT",
            "POST",
            "DELETE",
            "HEAD"
        ],
        "AllowedOrigins": [
            "*"
        ],
        "ExposeHeaders": [
            "ETag"
        ],
        "MaxAgeSeconds": 3000
    },
    {
        "AllowedHeaders": [
            "*"
        ],
        "AllowedMethods": [
            "GET"
        ],
        "AllowedOrigins": [
            "*"
        ],
        "ExposeHeaders": []
    }
]




 const { token } = res.data;

      // Set token to local storage
      localStorage.setItem("jwtToken", token);

      // Set token to Auth header
      setAuthToken(token);

      // Decode token to get user data
      const decoded = jwt_decode(token);

      // Set current user
      dispatch(setCurrentUser(decoded));




LOGOUT

      localStorage.removeItem("jwtToken");
  // Remove auth header for future requests
  setAuthToken(false);
  // Set current user to {} which will set isAuthenticated to false
  dispatch(setCurrentUser({}));










 <div className='banner flex border-solid border-blue-250 border-8 p-6 rounded-2xl justify-evenly self-center flex-wrap content-center w-auto '>
          <h1 className='text-red-250 sm:text-4xl text-xl'>
            • Make Your Reservation •
          </h1>
          <div className='w-full flex content-center justify-center'>
            <div className='form flex w-full flex-col p-4'>
              <div className='flex flex-row flex-wrap justify-center'>
                <div className='name p-2 flex-grow'>
                  <input
                    type='text'
                    value='Name'
                    name='clientName'
                    className='flex flex-grow h-full w-full shadow appearance-none border rounded-lg py-2 px-3 text-white bg-black-250 leading-tight focus:outline-none focus:shadow-outline sm:text-lg'
                    // onChange={(e) => {
                    //   setName(e.target.value);
                    // }}
                  />
                </div>
                <div className='contact p-2 flex-grow'>
                  <input
                    type='text'
                    value='Contact Number'
                    name='contactNum'
                    className='flex flex-grow h-full w-full shadow appearance-none border rounded-lg py-2 px-3 text-white bg-black-250 leading-tight focus:outline-none focus:shadow-outline sm:text-lg '
                    // onChange={(e) => {
                    //   setName(e.target.value);
                    // }}
                  />
                </div>
              </div>
              <div className='flex flex-row flex-wrap justify-center'>
                <div className='date p-2 flex-grow sm:w-4/12 w-12/12'>
                  {/* <input
                    className='flex-grow flex shadow appearance-none border py-2 px-3 w-full text-white bg-black-250 leading-tight focus:outline-none focus:shadow-outline rounded-lg sm:text-lg'
                    type='date'
                    name='schedule'
                    value='Date'
                  /> */}
                  <DatePicker
                    className='flex shadow  border py-2 px-3 w-full text-white bg-black-250 leading-tight focus:outline-none focus:shadow-outline rounded-lg sm:text-lg '
                    selected={startDate}
                    onChange={(dateNow: any) => {
                      setStartDate(dateNow);
                    }}
                    // excludeDates={excludeDates}
                    // inline
                    placeholderText='Select a day to reserve'
                  />
                </div>
                <div className='time p-2 flex-grow sm:w-3/12 w-4/12'>
                  <select
                    className='shadow text-center appearance-none w-full border bg-black-250 rounded-lg px-3 text-white py-2 sm:text-lg text-sm outline-none'
                    value='Time'
                    onChange={(e) => setSched(e.target.value)}
                  >
                    {selectOptions}
                  </select>{' '}
                </div>
                <div className='pax p-2 flex-grow w-3/12'>
                  <input
                    type='text'
                    value='Guests'
                    name='paxNum'
                    className='flex flex-grow h-full w-full shadow appearance-none border rounded-lg py-2 px-3 text-white bg-black-250 leading-tight focus:outline-none focus:shadow-outline sm:text-lg '
                    // onChange={(e) => {
                    //   setName(e.target.value);
                    // }}
                  />
                </div>
              </div>
              <div className='flex flex-row flex-wrap justify-center'>
                <div className='request p-2 flex-grow'>
                  <textarea
                    value='Request'
                    name='request'
                    className='request flex flex-grow h-full w-full shadow appearance-none border rounded-lg py-2 px-3 text-white bg-black-250 leading-tight focus:outline-none focus:shadow-outline sm:text-lg'
                    // onChange={(e) => {
                    //   setName(e.target.value);
                    // }}
                  />
                </div>
              </div>
              <div className='flex flex-row flex-wrap justify-between'>
                <div className='date sm:p-5 p-2 w-auto text-xs md:text-sm '>
                  <p className='flex'>
                    Restaurant Schedule:
                    <span className='text-red-250 ml-2 text-left'>
                      {' '}
                      Monday - Thursday (11:00am - 8:00pm) <br /> Friday -
                      Sunday (11:00am - 10:00pm)
                    </span>
                  </p>
                </div>
                <div className='time p-5 sm:w-screen md:w-auto sm:justify-end'>
                  <button
                    className='bg-blue-250 text-white font-semibold hover:bg-red-700 py-1 px-6 border-2 border-blue-250 hover:border-transparent rounded-full'
                    // onClick={newReservation}
                  >
                    SEND
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

